#: #
name: ifndef
name: MEDIMGRENDERALGO_RAY_CAST_SCENE_H
#: #
name: define
name: MEDIMGRENDERALGO_RAY_CAST_SCENE_H
header: map
header: renderalgo/mi_scene_base.h
header: arithmetic/mi_vector2f.h
header: arithmetic/mi_point2.h
header: arithmetic/mi_point3.h
header: renderalgo/mi_render_algo_define.h
header: renderalgo/mi_gpu_resource_pair.h
name: MED_IMG_BEGIN_NAMESPACE
keyword: class
class: RayCastScene
:: :
keyword: public
name: SceneBase
{: {
keyword: public
:: :
name: RayCastScene
(: (
name: ProcessingUnit
name: process_unit
,: ,
name: GPUPlatform
name: platform
): )
;: ;
name: RayCastScene
(: (
type: int
name: width
,: ,
type: int
name: height
,: ,
name: ProcessingUnit
name: process_unit
,: ,
name: GPUPlatform
name: platform
): )
;: ;
keyword: virtual
~: ~
name: RayCastScene
(: (
): )
;: ;
keyword: virtual
keyword: void
name: initialize
(: (
): )
;: ;
keyword: virtual
keyword: void
name: set_display_size
(: (
type: int
name: width
,: ,
type: int
name: height
): )
;: ;
keyword: virtual
keyword: void
name: render
(: (
): )
;: ;
keyword: virtual
keyword: void
name: render_to_back
(: (
): )
;: ;
keyword: virtual
keyword: void
name: rotate
(: (
keyword: const
name: Point2
&: &
name: pre_pt
,: ,
keyword: const
name: Point2
&: &
name: cur_pt
): )
;: ;
keyword: virtual
keyword: void
name: zoom
(: (
keyword: const
name: Point2
&: &
name: pre_pt
,: ,
keyword: const
name: Point2
&: &
name: cur_pt
): )
;: ;
keyword: virtual
keyword: void
name: zoom
(: (
type: float
name: scale_delta
): )
;: ;
keyword: virtual
keyword: void
name: pan
(: (
keyword: const
name: Point2
&: &
name: pre_pt
,: ,
keyword: const
name: Point2
&: &
name: cur_pt
): )
;: ;
keyword: virtual
keyword: void
name: set_volume_infos
(: (
name: std
scope: ::
name: shared_ptr
<: <
name: VolumeInfos
>: >
name: volume_infos
): )
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: VolumeInfos
>: >
name: get_volume_infos
(: (
): )
keyword: const
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: CameraCalculator
>: >
name: get_camera_calculator
(: (
): )
keyword: const
;: ;
comment: // 0 for ray casting 1 for entry points 2 for exit points
keyword: void
name: set_test_code
(: (
type: int
name: test_code
): )
;: ;
comment: // Mask label level
comment: // Default is L_8
keyword: void
name: set_mask_label_level
(: (
name: LabelLevel
name: label_level
): )
;: ;
comment: // Sample rate
keyword: void
name: set_sample_step
(: (
type: float
name: sample_step
): )
;: ;
comment: // Label parameter
keyword: virtual
keyword: void
name: set_visible_labels
(: (
name: std
scope: ::
name: vector
<: <
type: unsigned char
>: >
name: labels
): )
;: ;
name: std
scope: ::
name: vector
<: <
type: unsigned char
>: >
name: get_visible_labels
(: (
): )
keyword: const
;: ;
comment: //-----------------------------------------------//
comment: // Window level parameter ( 
comment: // is unregulated intensity. EG: CT modality, the unit is HU.
comment: // MIP/MinIP/Average: set WL to global
comment: // DVR: 
comment: //    1. mask-none: set WL to label 0
comment: //    2. mask-multi-label: set WL to label 1 to label_level-1. 
keyword: void
name: set_window_level
(: (
type: float
name: ww
,: ,
type: float
name: wl
,: ,
type: unsigned char
name: label
): )
;: ;
type: int
name: get_window_level
(: (
type: float
&: &
name: ww
,: ,
type: float
&: &
name: wl
,: ,
type: unsigned char
name: label
): )
keyword: const
;: ;
keyword: void
name: set_global_window_level
(: (
type: float
name: ww
,: ,
type: float
name: wl
): )
;: ;
keyword: void
name: get_global_window_level
(: (
type: float
&: &
name: ww
,: ,
type: float
&: &
name: wl
): )
keyword: const
;: ;
comment: // MinIP threshold(is unregulated intensity)
keyword: void
name: set_minip_threshold
(: (
type: float
name: th
): )
;: ;
comment: // Ray casting mode parameter
keyword: void
name: set_mask_mode
(: (
name: MaskMode
name: mode
): )
;: ;
keyword: void
name: set_composite_mode
(: (
name: CompositeMode
name: mode
): )
;: ;
keyword: void
name: set_interpolation_mode
(: (
name: InterpolationMode
name: mode
): )
;: ;
keyword: void
name: set_shading_mode
(: (
name: ShadingMode
name: mode
): )
;: ;
keyword: void
name: set_color_inverse_mode
(: (
name: ColorInverseMode
name: mode
): )
;: ;
name: MaskMode
name: get_mask_mode
(: (
): )
keyword: const
;: ;
name: CompositeMode
name: get_composite_mode
(: (
): )
keyword: const
;: ;
name: InterpolationMode
name: get_interpolation_mode
(: (
): )
keyword: const
;: ;
name: ShadingMode
name: get_shading_mode
(: (
): )
keyword: const
;: ;
name: ColorInverseMode
name: get_color_inverse_mode
(: (
): )
keyword: const
;: ;
keyword: void
name: set_ambient_color
(: (
type: float
name: r
,: ,
type: float
name: g
,: ,
type: float
name: b
,: ,
type: float
name: factor
): )
;: ;
keyword: void
name: set_material
(: (
keyword: const
name: Material
&: &
name: m
,: ,
type: unsigned char
name: label
): )
;: ;
comment: // Transfer function
keyword: void
name: set_pseudo_color
(: (
name: std
scope: ::
name: shared_ptr
<: <
name: ColorTransFunc
>: >
name: color
): )
;: ;
keyword: virtual
keyword: void
name: set_color_opacity
(: (
name: std
scope: ::
name: shared_ptr
<: <
name: ColorTransFunc
>: >
name: color
,: ,
name: std
scope: ::
name: shared_ptr
<: <
name: OpacityTransFunc
>: >
name: opacity
,: ,
type: unsigned char
name: label
): )
;: ;
comment: //return dc coordinate
name: Point2
name: project_point_to_screen
(: (
keyword: const
name: Point3
&: &
name: pt_w
): )
keyword: const
;: ;
keyword: virtual
keyword: void
name: set_downsample
(: (
keyword: bool
name: flag
): )
;: ;
keyword: void
name: set_ds_canvas_percent
(: (
type: int
name: percent
): )
;: ;
keyword: void
name: set_ds_dvr_sample_step
(: (
type: float
name: ds_dvr_sample_step
): )
;: ;
comment: //navigator window size : navi_size = min(scene_width, scene_height)/ratio
comment: //navigator viewport (scene_x - margin_x - navi_size, margin_y, navi_size, navi_size)  
comment: //default x/y margin(20), default ratio (4.5)
keyword: void
name: set_navigator_visibility
(: (
keyword: bool
name: flag
): )
;: ;
keyword: void
name: set_navigator_para
(: (
type: int
name: x_margin
,: ,
type: int
name: y_margin
,: ,
type: float
name: ratio
): )
;: ;
keyword: double
name: get_scale
(: (
): )
keyword: const
;: ;
keyword: protected
:: :
keyword: virtual
keyword: void
name: pre_render
(: (
): )
;: ;
keyword: protected
:: :
name: ProcessingUnit
name: _process_unit
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: VolumeInfos
>: >
name: _volume_infos
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: EntryExitPoints
>: >
name: _entry_exit_points
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: RayCaster
>: >
name: _ray_caster
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: Canvas
>: >
name: _canvas
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: OrthoCamera
>: >
name: _ray_cast_camera
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: CameraCalculator
>: >
name: _camera_calculator
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: OrthoCameraInteractor
>: >
name: _camera_interactor
;: ;
type: float
name: _global_ww
;: ;
type: float
name: _global_wl
;: ;
name: std
scope: ::
name: map
<: <
type: unsigned char
,: ,
name: Vector2f
>: >
name: _window_levels
;: ;
name: std
scope: ::
name: shared_ptr
<: <
name: TransferFunctionTexture
>: >
name: _transfer_funcion_texture
;: ;
comment: //graphic object
name: std
scope: ::
name: shared_ptr
<: <
name: GraphicObjectNavigator
>: >
name: _navigator
;: ;
keyword: bool
name: _navigator_vis
;: ;
type: int
name: _navigator_margin
[: [
number: 2
]: ]
;: ;
type: float
name: _navigator_window_ratio
;: ;
}: }
;: ;
name: MED_IMG_END_NAMESPACE
#: #
name: endif

//----------------------------------------//
class: RayCastScene

//----------------------------------------//
RayCastScene::RayCastScene
RayCastScene::get_camera_calculator
RayCastScene::get_color_inverse_mode
RayCastScene::get_composite_mode
RayCastScene::get_global_window_level
RayCastScene::get_interpolation_mode
RayCastScene::get_mask_mode
RayCastScene::get_scale
RayCastScene::get_shading_mode
RayCastScene::get_visible_labels
RayCastScene::get_volume_infos
RayCastScene::get_window_level
RayCastScene::initialize
RayCastScene::pan
RayCastScene::pre_render
RayCastScene::project_point_to_screen
RayCastScene::render
RayCastScene::render_to_back
RayCastScene::rotate
RayCastScene::set_ambient_color
RayCastScene::set_color_inverse_mode
RayCastScene::set_color_opacity
RayCastScene::set_composite_mode
RayCastScene::set_display_size
RayCastScene::set_downsample
RayCastScene::set_ds_canvas_percent
RayCastScene::set_ds_dvr_sample_step
RayCastScene::set_global_window_level
RayCastScene::set_interpolation_mode
RayCastScene::set_mask_label_level
RayCastScene::set_mask_mode
RayCastScene::set_material
RayCastScene::set_minip_threshold
RayCastScene::set_navigator_para
RayCastScene::set_navigator_visibility
RayCastScene::set_pseudo_color
RayCastScene::set_sample_step
RayCastScene::set_shading_mode
RayCastScene::set_test_code
RayCastScene::set_visible_labels
RayCastScene::set_volume_infos
RayCastScene::set_window_level
RayCastScene::zoom
