#: #
name: ifndef
name: MEDIMGARITHMETIC_MI_MATRIX4F_H
#: #
name: define
name: MEDIMGARITHMETIC_MI_MATRIX4F_H
#: #
name: include
string: "arithmetic/mi_simd.h"
#: #
name: include
string: "arithmetic/mi_vector4f.h"
name: MED_IMG_BEGIN_NAMESPACE
comment: /// \class Matrix4f
comment: ///
comment: /// \brief *****
name: class
name: Matrix4f
{: {
name: Vector4f
name: m_Col0
;: ;
name: Vector4f
name: m_Col1
;: ;
name: Vector4f
name: m_Col2
;: ;
name: Vector4f
name: m_Col3
;: ;
name: public
:: :
name: Matrix4f
(: (
): )
{: {
name: m_Col0
=: =
name: Vector4f
(: (
number: 0.0f
name: f
): )
;: ;
name: m_Col1
=: =
name: Vector4f
(: (
number: 0.0f
name: f
): )
;: ;
name: m_Col2
=: =
name: Vector4f
(: (
number: 0.0f
name: f
): )
;: ;
name: m_Col3
=: =
name: Vector4f
(: (
number: 0.0f
name: f
): )
;: ;
}: }
name: Matrix4f
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
{: {
name: m_Col0
=: =
name: mat
dot: .
name: m_Col0
;: ;
name: m_Col1
=: =
name: mat
dot: .
name: m_Col1
;: ;
name: m_Col2
=: =
name: mat
dot: .
name: m_Col2
;: ;
name: m_Col3
=: =
name: mat
dot: .
name: m_Col3
;: ;
}: }
name: Matrix4f
(: (
name: const
name: Vector4f
&: &
name: col0
,: ,
name: const
name: Vector4f
&: &
name: col1
,: ,
name: const
name: Vector4f
&: &
name: col2
,: ,
name: const
name: Vector4f
&: &
name: col3
): )
{: {
name: m_Col0
=: =
name: col0
;: ;
name: m_Col1
=: =
name: col1
;: ;
name: m_Col2
=: =
name: col2
;: ;
name: m_Col3
=: =
name: col3
;: ;
}: }
name: Matrix4f
(: (
name: const
name: float
name: scalar
): )
{: {
name: m_Col0
=: =
name: Vector4f
(: (
name: scalar
): )
;: ;
name: m_Col1
=: =
name: Vector4f
(: (
name: scalar
): )
;: ;
name: m_Col2
=: =
name: Vector4f
(: (
name: scalar
): )
;: ;
name: m_Col3
=: =
name: Vector4f
(: (
name: scalar
): )
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: operator
=: =
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
{: {
name: m_Col0
=: =
name: mat
dot: .
name: m_Col0
;: ;
name: m_Col1
=: =
name: mat
dot: .
name: m_Col1
;: ;
name: m_Col2
=: =
name: mat
dot: .
name: m_Col2
;: ;
name: m_Col3
=: =
name: mat
dot: .
name: m_Col3
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_translation
(: (
name: const
name: Vector3f
&: &
name: translateVec
): )
{: {
name: m_Col3
dot: .
name: set_xyz
(: (
name: translateVec
): )
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: const
name: Vector3f
name: get_translation
(: (
): )
name: const
{: {
name: return
name: m_Col3
dot: .
name: get_xyz
(: (
): )
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_col0
(: (
name: const
name: Vector4f
&: &
name: col0
): )
{: {
name: m_Col0
=: =
name: col0
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_col1
(: (
name: const
name: Vector4f
&: &
name: col1
): )
{: {
name: m_Col1
=: =
name: col1
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_col2
(: (
name: const
name: Vector4f
&: &
name: col2
): )
{: {
name: m_Col2
=: =
name: col2
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_col3
(: (
name: const
name: Vector4f
&: &
name: col3
): )
{: {
name: m_Col3
=: =
name: col3
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: const
name: Vector4f
name: get_col0
(: (
): )
name: const
{: {
name: return
name: m_Col0
;: ;
}: }
name: inline
name: const
name: Vector4f
name: get_col1
(: (
): )
name: const
{: {
name: return
name: m_Col1
;: ;
}: }
name: inline
name: const
name: Vector4f
name: get_col2
(: (
): )
name: const
{: {
name: return
name: m_Col2
;: ;
}: }
name: inline
name: const
name: Vector4f
name: get_col3
(: (
): )
name: const
{: {
name: return
name: m_Col3
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_col
(: (
name: const
name: int
name: col
,: ,
name: const
name: Vector4f
&: &
name: vec
): )
{: {
*: *
(: (
&: &
name: m_Col0
+: +
name: col
): )
=: =
name: vec
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: const
name: Vector4f
name: get_col
(: (
name: const
name: int
name: col
): )
name: const
{: {
name: return
*: *
(: (
&: &
name: m_Col0
+: +
name: col
): )
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_row
(: (
name: const
name: int
name: row
,: ,
name: const
name: Vector4f
&: &
name: vec
): )
{: {
name: m_Col0
dot: .
name: set_elem
(: (
name: row
,: ,
name: vec
dot: .
name: get_elem
(: (
number: 0
): )
): )
;: ;
name: m_Col1
dot: .
name: set_elem
(: (
name: row
,: ,
name: vec
dot: .
name: get_elem
(: (
number: 1
): )
): )
;: ;
name: m_Col2
dot: .
name: set_elem
(: (
name: row
,: ,
name: vec
dot: .
name: get_elem
(: (
number: 2
): )
): )
;: ;
name: m_Col3
dot: .
name: set_elem
(: (
name: row
,: ,
name: vec
dot: .
name: get_elem
(: (
number: 3
): )
): )
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: const
name: Vector4f
name: get_row
(: (
name: const
name: int
name: row
): )
name: const
{: {
name: return
name: Vector4f
(: (
name: m_Col0
dot: .
name: get_elem
(: (
name: row
): )
,: ,
name: m_Col1
dot: .
name: get_elem
(: (
name: row
): )
,: ,
name: m_Col2
dot: .
name: get_elem
(: (
name: row
): )
,: ,
name: m_Col3
dot: .
name: get_elem
(: (
name: row
): )
): )
;: ;
}: }
name: inline
name: Vector4f
&: &
name: operator
[: [
]: ]
(: (
name: const
name: int
name: col
): )
{: {
name: return
*: *
(: (
&: &
name: m_Col0
+: +
name: col
): )
;: ;
}: }
name: inline
name: const
name: Vector4f
name: operator
[: [
]: ]
(: (
name: const
name: int
name: col
): )
name: const
{: {
name: return
*: *
(: (
&: &
name: m_Col0
+: +
name: col
): )
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: set_elem
(: (
name: const
name: int
name: col
,: ,
name: const
name: int
name: row
,: ,
name: const
name: float
name: val
): )
{: {
name: Vector4f
name: tmpV3_0
;: ;
name: tmpV3_0
=: =
name: this
->: ->
name: get_col
(: (
name: col
): )
;: ;
name: tmpV3_0
dot: .
name: set_elem
(: (
name: row
,: ,
name: val
): )
;: ;
name: this
->: ->
name: set_col
(: (
name: col
,: ,
name: tmpV3_0
): )
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: const
name: float
name: get_elem
(: (
name: const
name: int
name: col
,: ,
name: const
name: int
name: row
): )
name: const
{: {
name: return
name: this
->: ->
name: get_col
(: (
name: col
): )
dot: .
name: get_elem
(: (
name: row
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: operator
+: +
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
name: const
{: {
name: return
name: Matrix4f
(: (
(: (
name: m_Col0
+: +
name: mat
dot: .
name: m_Col0
): )
,: ,
(: (
name: m_Col1
+: +
name: mat
dot: .
name: m_Col1
): )
,: ,
(: (
name: m_Col2
+: +
name: mat
dot: .
name: m_Col2
): )
,: ,
(: (
name: m_Col3
+: +
name: mat
dot: .
name: m_Col3
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: operator
-: -
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
name: const
{: {
name: return
name: Matrix4f
(: (
(: (
name: m_Col0
-: -
name: mat
dot: .
name: m_Col0
): )
,: ,
(: (
name: m_Col1
-: -
name: mat
dot: .
name: m_Col1
): )
,: ,
(: (
name: m_Col2
-: -
name: mat
dot: .
name: m_Col2
): )
,: ,
(: (
name: m_Col3
-: -
name: mat
dot: .
name: m_Col3
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: operator
-: -
(: (
): )
name: const
{: {
name: return
name: Matrix4f
(: (
(: (
-: -
name: m_Col0
): )
,: ,
(: (
-: -
name: m_Col1
): )
,: ,
(: (
-: -
name: m_Col2
): )
,: ,
(: (
-: -
name: m_Col3
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: operator
*: *
(: (
name: const
name: float
name: scalar
): )
name: const
{: {
name: return
name: Matrix4f
(: (
(: (
name: m_Col0
*: *
name: scalar
): )
,: ,
(: (
name: m_Col1
*: *
name: scalar
): )
,: ,
(: (
name: m_Col2
*: *
name: scalar
): )
,: ,
(: (
name: m_Col3
*: *
name: scalar
): )
): )
;: ;
}: }
name: inline
name: const
name: Vector4f
name: operator
*: *
(: (
name: const
name: Vector4f
&: &
name: vec
): )
name: const
{: {
name: return
name: Vector4f
(: (
name: _mm_add_ps
(: (
name: _mm_add_ps
(: (
name: _mm_mul_ps
(: (
name: m_Col0
dot: .
name: _m128
,: ,
name: _mm_shuffle_ps
(: (
name: vec
dot: .
name: _m128
,: ,
name: vec
dot: .
name: _m128
,: ,
name: _MM_SHUFFLE
(: (
number: 0
,: ,
number: 0
,: ,
number: 0
,: ,
number: 0
): )
): )
): )
,: ,
name: _mm_mul_ps
(: (
name: m_Col1
dot: .
name: _m128
,: ,
name: _mm_shuffle_ps
(: (
name: vec
dot: .
name: _m128
,: ,
name: vec
dot: .
name: _m128
,: ,
name: _MM_SHUFFLE
(: (
number: 1
,: ,
number: 1
,: ,
number: 1
,: ,
number: 1
): )
): )
): )
): )
,: ,
name: _mm_add_ps
(: (
name: _mm_mul_ps
(: (
name: m_Col2
dot: .
name: _m128
,: ,
name: _mm_shuffle_ps
(: (
name: vec
dot: .
name: _m128
,: ,
name: vec
dot: .
name: _m128
,: ,
name: _MM_SHUFFLE
(: (
number: 2
,: ,
number: 2
,: ,
number: 2
,: ,
number: 2
): )
): )
): )
,: ,
name: _mm_mul_ps
(: (
name: m_Col3
dot: .
name: _m128
,: ,
name: _mm_shuffle_ps
(: (
name: vec
dot: .
name: _m128
,: ,
name: vec
dot: .
name: _m128
,: ,
name: _MM_SHUFFLE
(: (
number: 3
,: ,
number: 3
,: ,
number: 3
,: ,
number: 3
): )
): )
): )
): )
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: operator
*: *
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
name: const
{: {
name: return
name: Matrix4f
(: (
(: (
*: *
name: this
*: *
name: mat
dot: .
name: m_Col0
): )
,: ,
(: (
*: *
name: this
*: *
name: mat
dot: .
name: m_Col1
): )
,: ,
(: (
*: *
name: this
*: *
name: mat
dot: .
name: m_Col2
): )
,: ,
(: (
*: *
name: this
*: *
name: mat
dot: .
name: m_Col3
): )
): )
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: operator
+=: +=
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
{: {
*: *
name: this
=: =
*: *
name: this
+: +
name: mat
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: operator
-=: -=
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
{: {
*: *
name: this
=: =
*: *
name: this
-: -
name: mat
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: operator
*=: *=
(: (
name: const
name: float
name: scalar
): )
{: {
*: *
name: this
=: =
*: *
name: this
*: *
name: scalar
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
&: &
name: operator
*=: *=
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
{: {
*: *
name: this
=: =
*: *
name: this
*: *
name: mat
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: identity
(: (
): )
{: {
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
): )
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: rotation_x
(: (
name: const
name: float
name: radians
): )
{: {
name: __m128
name: s
,: ,
name: c
,: ,
name: res1
,: ,
name: res2
;: ;
name: __m128
name: zero
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_y
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_z
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
}: }
;: ;
name: zero
=: =
name: _mm_setzero_ps
(: (
): )
;: ;
name: sincosf4
(: (
name: _mm_set1_ps
(: (
name: radians
): )
,: ,
&: &
name: s
,: ,
&: &
name: c
): )
;: ;
name: res1
=: =
name: vec_sel
(: (
name: zero
,: ,
name: c
,: ,
name: select_y
): )
;: ;
name: res1
=: =
name: vec_sel
(: (
name: res1
,: ,
name: s
,: ,
name: select_z
): )
;: ;
name: res2
=: =
name: vec_sel
(: (
name: zero
,: ,
name: negatef4
(: (
name: s
): )
,: ,
name: select_y
): )
;: ;
name: res2
=: =
name: vec_sel
(: (
name: res2
,: ,
name: c
,: ,
name: select_z
): )
;: ;
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: res1
): )
,: ,
name: Vector4f
(: (
name: res2
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
): )
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: rotation_y
(: (
name: const
name: float
name: radians
): )
{: {
name: __m128
name: s
,: ,
name: c
,: ,
name: res0
,: ,
name: res2
;: ;
name: __m128
name: zero
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_x
[: [
number: 4
]: ]
=: =
{: {
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_z
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
}: }
;: ;
name: zero
=: =
name: _mm_setzero_ps
(: (
): )
;: ;
name: sincosf4
(: (
name: _mm_set1_ps
(: (
name: radians
): )
,: ,
&: &
name: s
,: ,
&: &
name: c
): )
;: ;
name: res0
=: =
name: vec_sel
(: (
name: zero
,: ,
name: c
,: ,
name: select_x
): )
;: ;
name: res0
=: =
name: vec_sel
(: (
name: res0
,: ,
name: negatef4
(: (
name: s
): )
,: ,
name: select_z
): )
;: ;
name: res2
=: =
name: vec_sel
(: (
name: zero
,: ,
name: s
,: ,
name: select_x
): )
;: ;
name: res2
=: =
name: vec_sel
(: (
name: res2
,: ,
name: c
,: ,
name: select_z
): )
;: ;
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: res0
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: res2
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
): )
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: rotation_z
(: (
name: const
name: float
name: radians
): )
{: {
name: __m128
name: s
,: ,
name: c
,: ,
name: res0
,: ,
name: res1
;: ;
name: __m128
name: zero
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_x
[: [
number: 4
]: ]
=: =
{: {
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_y
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: zero
=: =
name: _mm_setzero_ps
(: (
): )
;: ;
name: sincosf4
(: (
name: _mm_set1_ps
(: (
name: radians
): )
,: ,
&: &
name: s
,: ,
&: &
name: c
): )
;: ;
name: res0
=: =
name: vec_sel
(: (
name: zero
,: ,
name: c
,: ,
name: select_x
): )
;: ;
name: res0
=: =
name: vec_sel
(: (
name: res0
,: ,
name: s
,: ,
name: select_y
): )
;: ;
name: res1
=: =
name: vec_sel
(: (
name: zero
,: ,
name: negatef4
(: (
name: s
): )
,: ,
name: select_x
): )
;: ;
name: res1
=: =
name: vec_sel
(: (
name: res1
,: ,
name: c
,: ,
name: select_y
): )
;: ;
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: res0
): )
,: ,
name: Vector4f
(: (
name: res1
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
): )
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: rotate
(: (
name: const
name: float
name: radians
,: ,
name: const
name: Vector3f
&: &
name: unitVec
): )
{: {
name: __m128
name: axis
,: ,
name: s
,: ,
name: c
,: ,
name: oneMinusC
,: ,
name: axisS
,: ,
name: negAxisS
,: ,
name: xxxx
,: ,
name: yyyy
,: ,
name: zzzz
,: ,
name: tmp0
,: ,
name: tmp1
,: ,
name: tmp2
;: ;
name: axis
=: =
name: unitVec
dot: .
name: _m128
;: ;
name: sincosf4
(: (
name: _mm_set1_ps
(: (
name: radians
): )
,: ,
&: &
name: s
,: ,
&: &
name: c
): )
;: ;
name: xxxx
=: =
name: vec_splat
(: (
name: axis
,: ,
number: 0
): )
;: ;
name: yyyy
=: =
name: vec_splat
(: (
name: axis
,: ,
number: 1
): )
;: ;
name: zzzz
=: =
name: vec_splat
(: (
name: axis
,: ,
number: 2
): )
;: ;
name: oneMinusC
=: =
name: vec_sub
(: (
name: _mm_set1_ps
(: (
number: 1.0f
name: f
): )
,: ,
name: c
): )
;: ;
name: axisS
=: =
name: vec_mul
(: (
name: axis
,: ,
name: s
): )
;: ;
name: negAxisS
=: =
name: negatef4
(: (
name: axisS
): )
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_x
[: [
number: 4
]: ]
=: =
{: {
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_y
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_z
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
}: }
;: ;
comment: // tmp0 = vec_perm( axisS, negAxisS, _VECTORMATH_PERM_XZBX );
name: tmp0
=: =
name: _mm_shuffle_ps
(: (
name: axisS
,: ,
name: axisS
,: ,
name: _MM_SHUFFLE
(: (
number: 0
,: ,
number: 0
,: ,
number: 2
,: ,
number: 0
): )
): )
;: ;
name: tmp0
=: =
name: vec_sel
(: (
name: tmp0
,: ,
name: vec_splat
(: (
name: negAxisS
,: ,
number: 1
): )
,: ,
name: select_z
): )
;: ;
comment: // tmp1 = vec_perm( axisS, negAxisS, _VECTORMATH_PERM_CXXX );
name: tmp1
=: =
name: vec_sel
(: (
name: vec_splat
(: (
name: axisS
,: ,
number: 0
): )
,: ,
name: vec_splat
(: (
name: negAxisS
,: ,
number: 2
): )
,: ,
name: select_x
): )
;: ;
comment: // tmp2 = vec_perm( axisS, negAxisS, _VECTORMATH_PERM_YAXX );
name: tmp2
=: =
name: _mm_shuffle_ps
(: (
name: axisS
,: ,
name: axisS
,: ,
name: _MM_SHUFFLE
(: (
number: 0
,: ,
number: 0
,: ,
number: 0
,: ,
number: 1
): )
): )
;: ;
name: tmp2
=: =
name: vec_sel
(: (
name: tmp2
,: ,
name: vec_splat
(: (
name: negAxisS
,: ,
number: 0
): )
,: ,
name: select_y
): )
;: ;
name: tmp0
=: =
name: vec_sel
(: (
name: tmp0
,: ,
name: c
,: ,
name: select_x
): )
;: ;
name: tmp1
=: =
name: vec_sel
(: (
name: tmp1
,: ,
name: c
,: ,
name: select_y
): )
;: ;
name: tmp2
=: =
name: vec_sel
(: (
name: tmp2
,: ,
name: c
,: ,
name: select_z
): )
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_xyz
[: [
number: 4
]: ]
=: =
{: {
number: 0
name: xffffffff
,: ,
number: 0
name: xffffffff
,: ,
number: 0
name: xffffffff
,: ,
number: 0
}: }
;: ;
name: axis
=: =
name: vec_and
(: (
name: axis
,: ,
name: _mm_load_ps
(: (
(: (
name: float
*: *
): )
name: select_xyz
): )
): )
;: ;
name: tmp0
=: =
name: vec_and
(: (
name: tmp0
,: ,
name: _mm_load_ps
(: (
(: (
name: float
*: *
): )
name: select_xyz
): )
): )
;: ;
name: tmp1
=: =
name: vec_and
(: (
name: tmp1
,: ,
name: _mm_load_ps
(: (
(: (
name: float
*: *
): )
name: select_xyz
): )
): )
;: ;
name: tmp2
=: =
name: vec_and
(: (
name: tmp2
,: ,
name: _mm_load_ps
(: (
(: (
name: float
*: *
): )
name: select_xyz
): )
): )
;: ;
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: vec_madd
(: (
name: vec_mul
(: (
name: axis
,: ,
name: xxxx
): )
,: ,
name: oneMinusC
,: ,
name: tmp0
): )
): )
,: ,
name: Vector4f
(: (
name: vec_madd
(: (
name: vec_mul
(: (
name: axis
,: ,
name: yyyy
): )
,: ,
name: oneMinusC
,: ,
name: tmp1
): )
): )
,: ,
name: Vector4f
(: (
name: vec_madd
(: (
name: vec_mul
(: (
name: axis
,: ,
name: zzzz
): )
,: ,
name: oneMinusC
,: ,
name: tmp2
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
): )
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: scale
(: (
name: const
name: Vector3f
&: &
name: scaleVec
): )
{: {
name: __m128
name: zero
=: =
name: _mm_setzero_ps
(: (
): )
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_x
[: [
number: 4
]: ]
=: =
{: {
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_y
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
,: ,
number: 0
}: }
;: ;
name: ALIGN16
name: unsigned
name: int
name: select_z
[: [
number: 4
]: ]
=: =
{: {
number: 0
,: ,
number: 0
,: ,
number: 0
name: xffffffff
,: ,
number: 0
}: }
;: ;
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: vec_sel
(: (
name: zero
,: ,
name: scaleVec
dot: .
name: _m128
,: ,
name: select_x
): )
): )
,: ,
name: Vector4f
(: (
name: vec_sel
(: (
name: zero
,: ,
name: scaleVec
dot: .
name: _m128
,: ,
name: select_y
): )
): )
,: ,
name: Vector4f
(: (
name: vec_sel
(: (
name: zero
,: ,
name: scaleVec
dot: .
name: _m128
,: ,
name: select_z
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
): )
): )
): )
;: ;
}: }
name: inline
name: const
name: Matrix4f
name: translation
(: (
name: const
name: Vector3f
&: &
name: translateVec
): )
{: {
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: translateVec
,: ,
number: 1.0f
name: f
): )
): )
;: ;
}: }
name: inline
name: void
name: set_identity
(: (
): )
{: {
*: *
name: this
=: =
name: Matrix4f
(: (
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
): )
): )
,: ,
name: Vector4f
(: (
name: _mm_setr_ps
(: (
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
): )
): )
): )
;: ;
}: }
name: inline
name: void
name: prepend
(: (
name: const
name: Matrix4f
&: &
name: myMatrix
): )
{: {
*: *
name: this
=: =
name: myMatrix
*: *
(: (
*: *
name: this
): )
;: ;
}: }
name: inline
name: void
name: append
(: (
name: const
name: Matrix4f
&: &
name: myMatrix
): )
{: {
*: *
name: this
=: =
(: (
*: *
name: this
): )
*: *
name: myMatrix
;: ;
}: }
name: inline
name: void
name: transpose
(: (
): )
{: {
name: __m128
name: tmp0
,: ,
name: tmp1
,: ,
name: tmp2
,: ,
name: tmp3
,: ,
name: res0
,: ,
name: res1
,: ,
name: res2
,: ,
name: res3
;: ;
name: tmp0
=: =
name: vec_mergeh
(: (
name: m_Col0
dot: .
name: _m128
,: ,
name: m_Col2
dot: .
name: _m128
): )
;: ;
name: tmp1
=: =
name: vec_mergeh
(: (
name: m_Col1
dot: .
name: _m128
,: ,
name: m_Col3
dot: .
name: _m128
): )
;: ;
name: tmp2
=: =
name: vec_mergel
(: (
name: m_Col0
dot: .
name: _m128
,: ,
name: m_Col2
dot: .
name: _m128
): )
;: ;
name: tmp3
=: =
name: vec_mergel
(: (
name: m_Col1
dot: .
name: _m128
,: ,
name: m_Col3
dot: .
name: _m128
): )
;: ;
name: res0
=: =
name: vec_mergeh
(: (
name: tmp0
,: ,
name: tmp1
): )
;: ;
name: res1
=: =
name: vec_mergel
(: (
name: tmp0
,: ,
name: tmp1
): )
;: ;
name: res2
=: =
name: vec_mergeh
(: (
name: tmp2
,: ,
name: tmp3
): )
;: ;
name: res3
=: =
name: vec_mergel
(: (
name: tmp2
,: ,
name: tmp3
): )
;: ;
*: *
name: this
=: =
name: Matrix4f
(: (
name: Vector4f
(: (
name: res0
): )
,: ,
name: Vector4f
(: (
name: res1
): )
,: ,
name: Vector4f
(: (
name: res2
): )
,: ,
name: Vector4f
(: (
name: res3
): )
): )
;: ;
}: }
name: inline
name: bool
name: has_inverse
(: (
): )
name: const
{: {
name: return
(: (
name: fabs
(: (
name: determinant
(: (
): )
): )
>: >
name: FLOAT_EPSILON
): )
;: ;
}: }
name: inline
name: Matrix4f
name: inverse
(: (
): )
name: const
{: {
name: __m128
name: Va
,: ,
name: Vb
,: ,
name: Vc
;: ;
name: __m128
name: r1
,: ,
name: r2
,: ,
name: r3
,: ,
name: tt
,: ,
name: tt2
;: ;
name: __m128
name: sum
,: ,
name: Det
,: ,
name: RDet
;: ;
name: __m128
name: trns0
,: ,
name: trns1
,: ,
name: trns2
,: ,
name: trns3
;: ;
name: __m128
name: _L1
=: =
name: m_Col0
dot: .
name: _m128
;: ;
name: __m128
name: _L2
=: =
name: m_Col1
dot: .
name: _m128
;: ;
name: __m128
name: _L3
=: =
name: m_Col2
dot: .
name: _m128
;: ;
name: __m128
name: _L4
=: =
name: m_Col3
dot: .
name: _m128
;: ;
comment: // Calculating the minterms for the first line.
comment: // _mm_ror_ps is just a macro using _mm_shuffle_ps().
name: tt
=: =
name: _L4
;: ;
name: tt2
=: =
name: _mm_ror_ps
(: (
name: _L3
,: ,
number: 1
): )
;: ;
name: Vc
=: =
name: _mm_mul_ps
(: (
name: tt2
,: ,
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 0
): )
): )
;: ;
comment: // V3'dot V4
name: Va
=: =
name: _mm_mul_ps
(: (
name: tt2
,: ,
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 2
): )
): )
;: ;
comment: // V3'dot V4"
name: Vb
=: =
name: _mm_mul_ps
(: (
name: tt2
,: ,
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 3
): )
): )
;: ;
comment: // V3' dot V4^
name: r1
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Va
,: ,
number: 1
): )
,: ,
name: _mm_ror_ps
(: (
name: Vc
,: ,
number: 2
): )
): )
;: ;
comment: // V3" dot V4^ - V3^ dot V4"
name: r2
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Vb
,: ,
number: 2
): )
,: ,
name: _mm_ror_ps
(: (
name: Vb
,: ,
number: 0
): )
): )
;: ;
comment: // V3^ dot V4' - V3' dot V4^
name: r3
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Va
,: ,
number: 0
): )
,: ,
name: _mm_ror_ps
(: (
name: Vc
,: ,
number: 1
): )
): )
;: ;
comment: // V3' dot V4" - V3" dot V4'
name: tt
=: =
name: _L2
;: ;
name: Va
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_mul_ps
(: (
name: Va
,: ,
name: r1
): )
;: ;
name: Vb
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 2
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: Vb
,: ,
name: r2
): )
): )
;: ;
name: Vc
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 3
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: Vc
,: ,
name: r3
): )
): )
;: ;
comment: // Calculating the determinant.
name: Det
=: =
name: _mm_mul_ps
(: (
name: sum
,: ,
name: _L1
): )
;: ;
name: Det
=: =
name: _mm_add_ps
(: (
name: Det
,: ,
name: _mm_movehl_ps
(: (
name: Det
,: ,
name: Det
): )
): )
;: ;
name: ALIGN16
name: const
name: unsigned
name: int
name: _vmathPNPN
[: [
number: 4
]: ]
=: =
{: {
number: 0
name: x00000000
,: ,
number: 0
name: x80000000
,: ,
number: 0
name: x00000000
,: ,
number: 0
name: x80000000
}: }
;: ;
name: ALIGN16
name: const
name: unsigned
name: int
name: _vmathNPNP
[: [
number: 4
]: ]
=: =
{: {
number: 0
name: x80000000
,: ,
number: 0
name: x00000000
,: ,
number: 0
name: x80000000
,: ,
number: 0
name: x00000000
}: }
;: ;
name: const
name: __m128
name: Sign_PNPN
=: =
name: _mm_load_ps
(: (
(: (
name: float
*: *
): )
name: _vmathPNPN
): )
;: ;
name: const
name: __m128
name: Sign_NPNP
=: =
name: _mm_load_ps
(: (
(: (
name: float
*: *
): )
name: _vmathNPNP
): )
;: ;
name: __m128
name: mtL1
=: =
name: _mm_xor_ps
(: (
name: sum
,: ,
name: Sign_PNPN
): )
;: ;
comment: // Calculating the minterms of the second line (using previous results).
name: tt
=: =
name: _mm_ror_ps
(: (
name: _L1
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r1
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r2
): )
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r3
): )
): )
;: ;
name: __m128
name: mtL2
=: =
name: _mm_xor_ps
(: (
name: sum
,: ,
name: Sign_NPNP
): )
;: ;
comment: // Testing the determinant.
name: Det
=: =
name: _mm_sub_ss
(: (
name: Det
,: ,
name: _mm_shuffle_ps
(: (
name: Det
,: ,
name: Det
,: ,
number: 1
): )
): )
;: ;
comment: // Calculating the minterms of the third line.
name: tt
=: =
name: _mm_ror_ps
(: (
name: _L1
,: ,
number: 1
): )
;: ;
name: Va
=: =
name: _mm_mul_ps
(: (
name: tt
,: ,
name: Vb
): )
;: ;
comment: // V1' dot V2"
name: Vb
=: =
name: _mm_mul_ps
(: (
name: tt
,: ,
name: Vc
): )
;: ;
comment: // V1' dot V2^
name: Vc
=: =
name: _mm_mul_ps
(: (
name: tt
,: ,
name: _L2
): )
;: ;
comment: // V1' dot V2
name: r1
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Va
,: ,
number: 1
): )
,: ,
name: _mm_ror_ps
(: (
name: Vc
,: ,
number: 2
): )
): )
;: ;
comment: // V1" dot V2^ - V1^ dot V2"
name: r2
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Vb
,: ,
number: 2
): )
,: ,
name: _mm_ror_ps
(: (
name: Vb
,: ,
number: 0
): )
): )
;: ;
comment: // V1^ dot V2' - V1' dot V2^
name: r3
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Va
,: ,
number: 0
): )
,: ,
name: _mm_ror_ps
(: (
name: Vc
,: ,
number: 1
): )
): )
;: ;
comment: // V1' dot V2" - V1" dot V2'
name: tt
=: =
name: _mm_ror_ps
(: (
name: _L4
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r1
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r2
): )
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r3
): )
): )
;: ;
name: __m128
name: mtL3
=: =
name: _mm_xor_ps
(: (
name: sum
,: ,
name: Sign_PNPN
): )
;: ;
comment: // Dividing is FASTER than rcp_nr! (Because rcp_nr causes many
comment: // register-memory RWs).
name: ALIGN16
name: const
name: float
name: _vmathZERONE
[: [
number: 4
]: ]
=: =
{: {
number: 1.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 0.0f
name: f
,: ,
number: 1.0f
name: f
}: }
;: ;
name: RDet
=: =
name: _mm_div_ss
(: (
name: _mm_load_ss
(: (
(: (
name: float
*: *
): )
&: &
name: _vmathZERONE
): )
,: ,
name: Det
): )
;: ;
comment: // TODO: just 1.0f?
name: RDet
=: =
name: _mm_shuffle_ps
(: (
name: RDet
,: ,
name: RDet
,: ,
number: 0
name: x00
): )
;: ;
comment: // Devide the first 12 minterms with the determinant.
name: mtL1
=: =
name: _mm_mul_ps
(: (
name: mtL1
,: ,
name: RDet
): )
;: ;
name: mtL2
=: =
name: _mm_mul_ps
(: (
name: mtL2
,: ,
name: RDet
): )
;: ;
name: mtL3
=: =
name: _mm_mul_ps
(: (
name: mtL3
,: ,
name: RDet
): )
;: ;
comment: // Calculate the minterms of the forth line and devide by the determinant.
name: tt
=: =
name: _mm_ror_ps
(: (
name: _L3
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r1
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r2
): )
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r3
): )
): )
;: ;
name: __m128
name: mtL4
=: =
name: _mm_xor_ps
(: (
name: sum
,: ,
name: Sign_NPNP
): )
;: ;
name: mtL4
=: =
name: _mm_mul_ps
(: (
name: mtL4
,: ,
name: RDet
): )
;: ;
comment: // Now we just have to transpose the minterms matrix.
name: trns0
=: =
name: _mm_unpacklo_ps
(: (
name: mtL1
,: ,
name: mtL2
): )
;: ;
name: trns1
=: =
name: _mm_unpacklo_ps
(: (
name: mtL3
,: ,
name: mtL4
): )
;: ;
name: trns2
=: =
name: _mm_unpackhi_ps
(: (
name: mtL1
,: ,
name: mtL2
): )
;: ;
name: trns3
=: =
name: _mm_unpackhi_ps
(: (
name: mtL3
,: ,
name: mtL4
): )
;: ;
name: _L1
=: =
name: _mm_movelh_ps
(: (
name: trns0
,: ,
name: trns1
): )
;: ;
name: _L2
=: =
name: _mm_movehl_ps
(: (
name: trns1
,: ,
name: trns0
): )
;: ;
name: _L3
=: =
name: _mm_movelh_ps
(: (
name: trns2
,: ,
name: trns3
): )
;: ;
name: _L4
=: =
name: _mm_movehl_ps
(: (
name: trns3
,: ,
name: trns2
): )
;: ;
name: return
name: Matrix4f
(: (
name: Vector4f
(: (
name: _L1
): )
,: ,
name: Vector4f
(: (
name: _L2
): )
,: ,
name: Vector4f
(: (
name: _L3
): )
,: ,
name: Vector4f
(: (
name: _L4
): )
): )
;: ;
}: }
name: inline
name: Vector3f
name: transform_point
(: (
name: const
name: Vector3f
&: &
name: mypoint
): )
name: const
{: {
name: Vector4f
name: spoint
=: =
name: Vector4f
(: (
name: mypoint
): )
;: ;
name: spoint
dot: .
name: _m
[: [
number: 3
]: ]
=: =
number: 1.0f
name: f
;: ;
name: Vector4f
name: temp
=: =
*: *
name: this
*: *
name: spoint
;: ;
name: float
name: dw
=: =
name: temp
dot: .
name: get_elem
(: (
number: 3
): )
;: ;
name: dw
=: =
name: fabs
(: (
name: dw
): )
>: >
name: FLOAT_EPSILON
?: ?
name: dw
:: :
name: FLOAT_EPSILON
;: ;
name: dw
=: =
number: 1.0f
name: f
/: /
name: dw
;: ;
name: temp
=: =
name: temp
*: *
name: dw
;: ;
name: return
name: Vector3f
(: (
name: temp
dot: .
name: _m128
): )
;: ;
}: }
name: inline
name: Vector3f
name: transform_vector
(: (
name: const
name: Vector3f
&: &
name: vec
): )
name: const
{: {
name: __m128
name: res
;: ;
name: __m128
name: xxxx
,: ,
name: yyyy
,: ,
name: zzzz
;: ;
name: xxxx
=: =
name: vec_splat
(: (
name: vec
dot: .
name: _m128
,: ,
number: 0
): )
;: ;
name: yyyy
=: =
name: vec_splat
(: (
name: vec
dot: .
name: _m128
,: ,
number: 1
): )
;: ;
name: zzzz
=: =
name: vec_splat
(: (
name: vec
dot: .
name: _m128
,: ,
number: 2
): )
;: ;
name: res
=: =
name: vec_mul
(: (
name: m_Col0
dot: .
name: _m128
,: ,
name: xxxx
): )
;: ;
name: res
=: =
name: vec_madd
(: (
name: m_Col1
dot: .
name: _m128
,: ,
name: yyyy
,: ,
name: res
): )
;: ;
name: res
=: =
name: vec_madd
(: (
name: m_Col2
dot: .
name: _m128
,: ,
name: zzzz
,: ,
name: res
): )
;: ;
name: return
name: Vector3f
(: (
name: res
): )
;: ;
}: }
name: inline
name: void
name: extract_translate
(: (
name: Vector3f
&: &
name: myVector
): )
name: const
{: {
name: myVector
=: =
name: Vector3f
(: (
name: m_Col3
dot: .
name: _m128
): )
;: ;
}: }
name: inline
name: float
name: determinant
(: (
): )
name: const
{: {
name: __m128
name: Va
,: ,
name: Vb
,: ,
name: Vc
;: ;
name: __m128
name: r1
,: ,
name: r2
,: ,
name: r3
,: ,
name: tt
,: ,
name: tt2
;: ;
name: __m128
name: sum
,: ,
name: Det
;: ;
name: __m128
name: _L1
=: =
name: m_Col0
dot: .
name: _m128
;: ;
name: __m128
name: _L2
=: =
name: m_Col1
dot: .
name: _m128
;: ;
name: __m128
name: _L3
=: =
name: m_Col2
dot: .
name: _m128
;: ;
name: __m128
name: _L4
=: =
name: m_Col3
dot: .
name: _m128
;: ;
comment: // Calculating the minterms for the first line.
comment: // _mm_ror_ps is just a macro using _mm_shuffle_ps().
name: tt
=: =
name: _L4
;: ;
name: tt2
=: =
name: _mm_ror_ps
(: (
name: _L3
,: ,
number: 1
): )
;: ;
name: Vc
=: =
name: _mm_mul_ps
(: (
name: tt2
,: ,
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 0
): )
): )
;: ;
comment: // V3' dot V4
name: Va
=: =
name: _mm_mul_ps
(: (
name: tt2
,: ,
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 2
): )
): )
;: ;
comment: // V3' dot V4"
name: Vb
=: =
name: _mm_mul_ps
(: (
name: tt2
,: ,
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 3
): )
): )
;: ;
comment: // V3' dot V4^
name: r1
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Va
,: ,
number: 1
): )
,: ,
name: _mm_ror_ps
(: (
name: Vc
,: ,
number: 2
): )
): )
;: ;
comment: // V3" dot V4^ - V3^ dot V4"
name: r2
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Vb
,: ,
number: 2
): )
,: ,
name: _mm_ror_ps
(: (
name: Vb
,: ,
number: 0
): )
): )
;: ;
comment: // V3^ dot V4' - V3' dot V4^
name: r3
=: =
name: _mm_sub_ps
(: (
name: _mm_ror_ps
(: (
name: Va
,: ,
number: 0
): )
,: ,
name: _mm_ror_ps
(: (
name: Vc
,: ,
number: 1
): )
): )
;: ;
comment: // V3' dot V4" - V3" dot V4'
name: tt
=: =
name: _L2
;: ;
name: Va
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_mul_ps
(: (
name: Va
,: ,
name: r1
): )
;: ;
name: Vb
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 2
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: Vb
,: ,
name: r2
): )
): )
;: ;
name: Vc
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 3
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: Vc
,: ,
name: r3
): )
): )
;: ;
comment: // Calculating the determinant.
name: Det
=: =
name: _mm_mul_ps
(: (
name: sum
,: ,
name: _L1
): )
;: ;
name: Det
=: =
name: _mm_add_ps
(: (
name: Det
,: ,
name: _mm_movehl_ps
(: (
name: Det
,: ,
name: Det
): )
): )
;: ;
comment: // Calculating the minterms of the second line (using previous results).
name: tt
=: =
name: _mm_ror_ps
(: (
name: _L1
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r1
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r2
): )
): )
;: ;
name: tt
=: =
name: _mm_ror_ps
(: (
name: tt
,: ,
number: 1
): )
;: ;
name: sum
=: =
name: _mm_add_ps
(: (
name: sum
,: ,
name: _mm_mul_ps
(: (
name: tt
,: ,
name: r3
): )
): )
;: ;
comment: // Testing the determinant.
name: Det
=: =
name: _mm_sub_ss
(: (
name: Det
,: ,
name: _mm_shuffle_ps
(: (
name: Det
,: ,
name: Det
,: ,
number: 1
): )
): )
;: ;
name: return
name: _vmathVfGetElement
(: (
name: Det
,: ,
number: 0
): )
;: ;
}: }
name: inline
name: Matrix4f
name: get_transpose
(: (
): )
name: const
{: {
name: Matrix4f
name: tmp
=: =
*: *
name: this
;: ;
name: tmp
dot: .
name: transpose
(: (
): )
;: ;
name: return
name: tmp
;: ;
}: }
name: inline
name: bool
name: operator
==: ==
(: (
name: const
name: Matrix4f
&: &
name: myMatrix
): )
name: const
{: {
name: return
(: (
name: m_Col0
==: ==
name: myMatrix
dot: .
name: get_col0
(: (
): )
&&: &&
name: m_Col1
==: ==
name: myMatrix
dot: .
name: get_col1
(: (
): )
&&: &&
name: m_Col2
==: ==
name: myMatrix
dot: .
name: get_col2
(: (
): )
&&: &&
name: m_Col3
==: ==
name: myMatrix
dot: .
name: get_col3
(: (
): )
): )
;: ;
}: }
name: inline
name: bool
name: operator
!=: !=
(: (
name: const
name: Matrix4f
&: &
name: myMatrix
): )
name: const
{: {
name: return
(: (
name: m_Col0
!=: !=
name: myMatrix
dot: .
name: get_col0
(: (
): )
||: ||
name: m_Col1
!=: !=
name: myMatrix
dot: .
name: get_col1
(: (
): )
||: ||
name: m_Col2
!=: !=
name: myMatrix
dot: .
name: get_col2
(: (
): )
||: ||
name: m_Col3
!=: !=
name: myMatrix
dot: .
name: get_col3
(: (
): )
): )
;: ;
}: }
name: inline
name: bool
name: is_affine
(: (
): )
name: const
{: {
name: Vector4f
name: tmp
=: =
name: this
->: ->
name: get_row
(: (
number: 3
): )
;: ;
name: return
(: (
name: tmp
==: ==
name: Vector4f
(: (
name: FLOAT_EPSILON
,: ,
name: FLOAT_EPSILON
,: ,
name: FLOAT_EPSILON
,: ,
name: FLOAT_EPSILON
+: +
number: 1.0f
name: f
): )
): )
;: ;
}: }
name: inline
name: Matrix4f
name: make_scale
(: (
name: const
name: Vector3f
&: &
name: myScale
): )
{: {
name: set_identity
(: (
): )
;: ;
name: m_Col0
*=: *=
name: myScale
dot: .
name: get_x
(: (
): )
;: ;
name: m_Col1
*=: *=
name: myScale
dot: .
name: get_y
(: (
): )
;: ;
name: m_Col2
*=: *=
name: myScale
dot: .
name: get_z
(: (
): )
;: ;
name: return
*: *
name: this
;: ;
}: }
name: inline
name: Matrix4f
name: make_translate
(: (
name: const
name: Vector3f
&: &
name: myTranslate
): )
{: {
name: set_identity
(: (
): )
;: ;
name: m_Col3
+=: +=
name: Vector4f
(: (
name: myTranslate
,: ,
number: 0.0f
name: f
): )
;: ;
name: return
*: *
name: this
;: ;
}: }
}: }
;: ;
comment: //////////////////////////////////////////////////////////////////////////
comment: ////Non-member function
comment: //////////////////////////////////////////////////////////////////////////
comment: // append (post-multiply) a scale transformation to a 4x4 matrix
comment: // Faster than creating and multiplying a scale transformation matrix.
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: append_scale
(: (
name: const
name: Matrix4f
&: &
name: mat
,: ,
name: const
name: Vector3f
&: &
name: scaleVec
): )
;: ;
comment: // prepend (pre-multiply) a scale transformation to a 4x4 matrix
comment: // Faster than creating and multiplying a scale transformation matrix.
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: prepend_scale
(: (
name: const
name: Vector3f
&: &
name: scaleVec
,: ,
name: const
name: Matrix4f
&: &
name: mat
): )
;: ;
comment: // Multiply two 4x4 matrices per element
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: mul_per_elem
(: (
name: const
name: Matrix4f
&: &
name: mat0
,: ,
name: const
name: Matrix4f
&: &
name: mat1
): )
;: ;
comment: // Compute the absolute value of a 4x4 matrix per element
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: abs_per_elem
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
;: ;
comment: // transpose of a 4x4 matrix
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: transpose
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
;: ;
comment: // Compute the inverse of a 4x4 matrix
comment: // Result is unpredictable when the determinant of mat is equal to or near 0.
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: inverse
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
;: ;
comment: // Compute the inverse of a 4x4 matrix, which is expected to be an affine matrix
comment: // This can be used to achieve better performance than a general inverse when
comment: // the specified 4x4 matrix meets the given restrictions.  The result is
comment: // unpredictable when the determinant of mat is equal to or near 0.
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: affine_inverse
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
;: ;
comment: // Compute the inverse of a 4x4 matrix, which is expected to be an affine matrix
comment: // with an orthogonal upper-left 3x3 submatrix
comment: // This can be used to achieve better performance than a general inverse when
comment: // the specified 4x4 matrix meets the given restrictions.
name: Arithmetic_Export
name: inline
name: const
name: Matrix4f
name: ortho_inverse
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
;: ;
comment: // determinant of a 4x4 matrix
name: Arithmetic_Export
name: inline
name: const
name: float
name: determinant
(: (
name: const
name: Matrix4f
&: &
name: mat
): )
;: ;
name: MED_IMG_END_NAMESPACE
#: #
name: endif
